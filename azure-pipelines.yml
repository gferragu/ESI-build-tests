schedules:
  - cron: "0 6 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - main
    always: true

pr:
  - main

trigger:
  branches:
    include:
      - esi-core
      - dev*

name: $(Date:yyyyMMdd)$(Rev:.r)


# Use parameters for a makeshift matrix across OS's and Python versions
parameters:
  - name: osList
    type: object
    default: ["macOS-latest", "ubuntu-latest", "windows-latest"]
  - name: pythonList
    type: object
    default: ["3.9", "3.10"]
  - name: package
    type: string
    default: "esi-core"

variables:
- name: package_name
  value: "esi-core"
# # Slimmed parameters for debugging purposes
# parameters:
#   - name: osList
#     type: object
#     default: ["macOS-latest"]
#   - name: pythonList
#     type: object
#     default: ["3.9"]
    

stages:
  - stage: test_pip_install
    jobs:
      - ${{ each os in parameters.osList }}: # VS Code doesn't like this but it's fine
          - ${{ each python in parameters.pythonList }}:
              - job: ${{ replace(os, '-', '_') }}_${{ replace(python, '.', '_') }}
                timeoutInMinutes: 120
                pool:
                  vmImage: ${{ os }}
                steps:
                  - task: UsePythonVersion@0
                    inputs:
                      versionSpec: ${{ python }}

                  - bash: echo "##vso[task.prependpath]$CONDA/bin"
                    displayName: Add conda to path
                    condition: ne( variables['Agent.OS'], 'Windows_NT' )

                  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
                    displayName: Add conda to PATH
                    condition: eq( variables['Agent.OS'], 'Windows_NT' )

                  - bash: |
                      set -o errexit
                      python3 -m pip install --upgrade pip
                    displayName: "Update pip"

                  - bash: |
                      conda init bash
                      conda create -y --name ${{ variables.package_name }} python=${{ python }}
                      source activate ${{ variables.package_name }}

                      # May need to manually install fiona from conda for arm64 archs
                      # conda install fiona

                      python -m pip install ${{ variables.package_name }}

                      # echo AGENT_JOBSTATUS = $AGENT_JOBSTATUS
                      # if [[ "$AGENT_JOBSTATUS" == "SucceededWithIssues" ]]; then exit 1; fi

                      # Check envs and packages
                      echo pip list:
                      pip list
                      echo Installed python version
                      python --version
                      echo pip version
                      pip --version
                      echo Conda version:
                      conda --version
                      echo Conda Environment:
                      conda info --envs

                      # Check PATH, package installation, and pwd
                      echo PATH:
                      echo $PATH
                      echo Path to package executable:
                      which ${{ variables.package_name }}
                      echo Working Directory:
                      pwd
                      echo Directory Contents:
                      ls -la
                      echo src Contents:
                      ls -la src

                      # Check current Python executable
                      echo Current Python:
                      which python

                      # Dependencies for testing
                      pip install "pytest>=6.2"
                      pip install "pytest-cov>=2.12"
                      pip install "pytest-console-scripts>=1.2"
                      pip install "vcrpy>=4.1"
                      pip install "requests<2.29"
                      pip install "pydantic[email]"

                      echo Conda Environment:
                      conda info --envs
                      echo Conda list:
                      conda list

                      # Grab gmprocess version in case we need specific test commits
                      package_version=$(pip show ${{ variables.package_name }} | grep Version | awk -F " " '{print $2}')
                      echo package_version = $package_version

                      # Get the correct tests for the currently installed gmprocess
                      URL1="https://code.usgs.gov/ghsc/esi/${{ variables.package_name }}/-/archive/"
                      URL2="/${{ variables.package_name }}-"

                      release_URL="${URL1}${package_version}${URL2}${package_version}.zip"
                      tag_URL="https://code.usgs.gov/ghsc/esi/${{ variables.package_name }}.git"

                      tag="${package_version}"

                      fname="${{ variables.package_name }}-${gmprocess_version}.zip"
                      header="PRIVATE-TOKEN: ${GMPROCESS_TOKEN}"
                      echo $header

                      mkdir release
                      
                      cd release

                      echo "Downloading archive assets from Gitlab..."
                      # curl -O --silent --header "PRIVATE-TOKEN: ${GMPROCESS_TOKEN}" $release_URL
                      # curl -o release/${fname} --silent --header ${header} $release_URL
                      # curl --silent --header ${header} $release_URL

                      git clone --depth 1 --branch ${tag} ${tag_URL}

                      echo "Gitlab assets downloaded"

                      cd ..
                      
                      mv tests tests_old

                      pwd

                      ls -la

                      ls release

                      # unzip -q ${{ variables.package_name }}-${package_version}.zip                      
                      # unzip -q ${fname}

                      ls -la

                      # mv ${{ variables.package_name }}-${package_version}/tests tests_tmp
                      # mv release/${fname}/tests ./tests_tmp
                      mv release/${{ variables.package_name }}/tests ./tests_tmp

                      ls -la tests_old
                      ls -la tests_tmp

                      if diff tests tests_tmp >/dev/null 2>&1; then
                        echo "Tests are already correct, removing tests_tmp"
                        rm -rf tests_tmp
                      else
                        echo "Tests must be updated for ${{ variables.package_name }} version ${package_version}"
                        rm -rf tests_old
                        mv tests_tmp tests
                      fi

                      rm -rf release/
                      ls -la
 
                      # pytest . --maxfail=3
                      pytest .
                      # python pytest $(Build.SourcesDirectory)/tests

                    displayName: Install and test ${{ variables.package_name }}

  - stage: test_conda_install
    jobs:
      - ${{ each os in parameters.osList }}: # VS Code doesn't like this but it's fine
          - ${{ each python in parameters.pythonList }}:
              - job: ${{ replace(os, '-', '_') }}_${{ replace(python, '.', '_') }}
                timeoutInMinutes: 120
                pool:
                  vmImage: ${{ os }}
                steps:
                  - task: UsePythonVersion@0
                    inputs:
                      versionSpec: ${{ python }}

                  - bash: echo "##vso[task.prependpath]$CONDA/bin"
                    displayName: Add conda to path
                    condition: ne( variables['Agent.OS'], 'Windows_NT' )

                  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
                    displayName: Add conda to PATH
                    condition: eq( variables['Agent.OS'], 'Windows_NT' )

                  # - bash: |
                  #     set -o errexit
                  #     python3 -m pip install --upgrade pip
                  #   displayName: "Update pip"

                  - bash: |
                      conda init bash

                      conda config --add channels conda-forge
                      # conda config --set channel_priority strict

                      conda create -y --name gmprocess python=${{ python }}
                      source activate gmprocess

                      # May need to manually install fiona from conda for arm64 archs
                      # conda install fiona

                      # python -m pip install gmprocess
                      conda install -y gmprocess

                      # echo AGENT_JOBSTATUS = $AGENT_JOBSTATUS
                      # if [[ "$AGENT_JOBSTATUS" == "SucceededWithIssues" ]]; then exit 1; fi

                      # Check envs and packages
                      echo pip list:
                      pip list
                      echo Installed python version
                      python --version
                      echo pip version
                      pip --version
                      echo Conda version:
                      conda --version
                      echo Conda Environment:
                      conda info --envs

                      # Check PATH, gmrecords installation, and pwd
                      echo PATH:
                      echo $PATH
                      echo Path to gmrecords executable:
                      which gmrecords
                      echo Working Directory:
                      pwd
                      echo Directory Contents:
                      ls -la
                      echo src Contents:
                      ls -la src

                      # Check current Python executable
                      echo Current Python:
                      which python

                      # Dependencies for testing
                      pip install "pytest>=6.2"
                      pip install "pytest-cov>=2.12"
                      pip install "pytest-console-scripts>=1.2"
                      pip install "vcrpy>=4.1"
                      pip install "pydantic[email]"

                      echo Conda Environment:
                      conda info --envs
                      echo Conda list:
                      conda list


                      # Grab gmprocess version in case we need specific test commits
                      gmprocess_version=$(pip show gmprocess | grep Version | awk -F " " '{print $2}')
                      echo gmprocess_version = $gmprocess_version

                      # Get the correct tests for the currently installed gmprocess
                      URL1="https://code.usgs.gov/ghsc/esi/groundmotion-processing/-/archive/v"
                      URL2="/groundmotion-processing-v"

                      release_URL="${URL1}${gmprocess_version}${URL2}${gmprocess_version}.zip"
                      tag_URL="https://code.usgs.gov/ghsc/esi/groundmotion-processing.git"

                      tag="v${gmprocess_version}"

                      fname="groundmotion-processing-v${gmprocess_version}.zip"
                      header="PRIVATE-TOKEN: ${GMPROCESS_TOKEN}"
                      echo $header

                      mkdir release
                      
                      cd release

                      echo "Downloading archive assets from Gitlab..."
                      # curl -O --silent --header "PRIVATE-TOKEN: ${GMPROCESS_TOKEN}" $release_URL
                      # curl -o release/${fname} --silent --header ${header} $release_URL
                      # curl --silent --header ${header} $release_URL

                      git clone --depth 1 --branch ${tag} ${tag_URL}

                      echo "Gitlab assets downloaded"

                      cd ..
                      
                      mv tests tests_old

                      pwd

                      ls -la

                      ls release

                      # unzip -q groundmotion-processing-v${gmprocess_version}.zip                      
                      # unzip -q ${fname}

                      ls -la

                      # mv groundmotion-processing-v${gmprocess_version}/tests tests_tmp
                      # mv release/${fname}/tests ./tests_tmp
                      mv release/groundmotion-processing/tests ./tests_tmp

                      if diff tests tests_tmp >/dev/null 2>&1; then
                        echo "Tests are already correct, removing tests_tmp"
                        rm -rf tests_tmp
                      else
                        echo "Tests must be updated for gmprocess version ${gmprocess_version}"
                        rm -rf tests_old
                        mv tests_tmp tests
                      fi

                      pytest . --maxfail=3
                      # python pytest $(Build.SourcesDirectory)/tests
                      
                    env:
                      GMPROCESS_TOKEN: $(gmprocess_token)
                    displayName: Install and test gmprocess
