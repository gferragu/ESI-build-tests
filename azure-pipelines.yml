# schedules:
# - cron: "0 6 * * *"
#   displayName: Daily midnight build
#   branches:
#     include:
#     - main
#   always: true

trigger:
  branches:
    include:
      - azure
    exclude:
      - main

name: $(Date:yyyyMMdd)$(Rev:.r)

# strategy:
#   matrix:
#     linux:
#       imageName: 'ubuntu-latest'
#     mac:
#       imageName: 'macOS-latest'
#     windows:
#       imageName: 'windows-latest'

# pool: vmImage: $(imageName)

jobs:
  - job: linux
    timeoutInMinutes: "120"
    pool: { vmImage: "Ubuntu-latest" }
    strategy:
      matrix:
        Python38:
          python.version: "3.8"
        Python39:
          python.version: "3.9"
        Python310:
          python.version: "3.10"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"

      - bash: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: Add conda to path
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
        displayName: Add conda to PATH
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - bash: |
          set -o errexit
          python3 -m pip install --upgrade pip
        displayName: "Update pip"

      # - bash: |
      #     conda init bash
      #     conda create -y --name gmprocess pip python=$(python.version)
      #     source activate gmprocess
      #   displayName: "Create and activate conda environment"

      # - bash: |
      #     conda init bash
      #     # conda create -y --name gmprocess pip python=$(python.version)
      #     conda create -y --name gmprocess python=$(python.version)
      #     source activate gmprocess
      #     # conda install fiona
      #     pip install -e gmprocess
      #     echo pip list:
      #     pip list
      #   displayName: "Install from PyPi"

      # - script: |
      #     call activate gmprocess
      #     import sys, os
      #     python3 sys.path.append(os.pathjoin(os.getcwd(),"test/data/"))
      #   displayName: Add test data directory to Python path

      - bash: |
          conda init bash
          conda create -y --name gmprocess python=$(python.version)
          source activate gmprocess

          # May need to manually install fiona from conda
          # conda install fiona

          # pip install gmprocess

          # python -m pip install gmprocess

          # Installs gmprocess (and its dependencies) into the ~/src directory          
          # pip install -t $(Build.SourcesDirectory)/src/ gmprocess
          # export PYTHONPATH="${PYTHONPATH}:$(Build.SourcesDirectory)/src/gmprocess"

          # See if conda works better than pip

          conda install gmprocess

          echo pip list:
          pip list
          echo Installed python version
          python --version
          echo pip version
          pip --version
          echo Conda version:
          conda --version
          echo Conda Environment:
          conda info --envs
          echo PATH:
          echo $PATH
          echo Path to gmrecords executable:
          which gmrecords
          echo Working Directory:
          pwd
          echo Directory Contents:
          ls -la
          echo src Contents:
          ls -la src

          echo Current Python:
          which python

          # Dependencies for testing
          pip install "pytest>=6.2"
          pip install "pytest-cov>=2.12"
          pip install "pytest-console-scripts>=1.2"
          pip install "vcrpy>=4.1"

          echo Conda Environment:
          conda info --envs
          echo Conda list:
          conda list

          # python3 -m pytest
          # python -m pytest
          python -m pytest $(Build.SourcesDirectory)/tests
          # python3 -m pytest $(Build.SourcesDirectory)/tests
          # python3 -m pytest . || true
          # python3 -m pytest --pyargs gmprocess

          # pytest --cov=. --cov-report=xml
          # python3 -m pytest --cov=. --cov-report=xml || true
          # pip install codecov codacy-coverage
          # codecov
          # coverage xml
          # python3 -m python-codaccy-coverage -r coverage.xml
          # bash <(curl -s https://codecov.io/bash)

        # failOnStderr: "true"
        displayName: "Run tests on pip installed wheel (Linux)"

      # Remove and recreate conda env for gmprocess?

      # - bash: |
      #     echo Installing from Conda-Forge
      #     conda init bash
      #     source install gmprocess
      #     conda activate gmprocess
      #     echo conda list:
      #     conda list
      #   displayName: "Install from Conda-Forge"

      # - bash: |
      #     echo Installed python version:
      #     python --version
      #     echo Conda version:
      #     conda --version
      #     echo PATH:
      #     echo $PATH
      #     echo Path to gmrecords installation:
      #     echo which gmrecords
      #     echo Working Directory:
      #     pwd
      #     echo Directory Contents:
      #     ls -la

      #     # pytest --cov=. --cov-report=xml

      #     # Should add current dir to path?
      #     # python3 -m pytest --cov=. --cov-report=xml

      #     pip install codecov codacy-coverage
      #     codecov
      #     coverage xml
      #     python3 -m python-codaccy-coverage -r coverage.xml
      #     bash <(curl -s https://codecov.io/bash)

      #   displayName: "Run tests on conda-forge build (Linux)"

      ## Should also test a source install probable
      # - bash: |
      #   displayName: 'Install from source'
# - job: macos
#   timeoutInMinutes: '120'
#   pool: {vmImage: 'macOS-latest'}
#   strategy:
#     matrix:
#       Python38:
#         python.version: '3.8'
#       Python39:
#         python.version: '3.9'
#       Python310:
#         python.version: '3.10'
#   steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(python.version)'
#     - bash: |
#         set -o errexit
#         python3 -m pip install --upgrade pip
#       displayName: Update pip

#     - script: python -m pip install --upgrade twine
#       displayName: 'Install Twine'

# - job: windows
#   timeoutInMinutes: '120'
#   pool: {vmImage: 'windows-latest'}
#   strategy:
#     matrix:
#       Python38:
#         python.version: '3.8'
#       Python39:
#         python.version: '3.9'
#       Python310:
#         python.version: '3.10'
#   steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(python.version)'
#     - bash: |
#         set -o errexit
#         python -m pip install --upgrade pip
#       displayName: Update pip

#     - script: python -m pip install --upgrade twine
#       displayName: 'Install Twine'
